<?php

/**
 * @file
 * inSitu Field Folder
 */

/**
 * Implements hook_field_info().
 * 
 * This field provides a select list for choosing a folder path to be saved as field value.
 */
function insitu_field_folder_field_info() {
  return array(
    'insitu_field_folder' => array(
      'label' => t('Folder'),
      'description' => t('The folder that contains the folders that the package to point to.'),
      'instance_settings' => array('field_folder_root' => '', 'field_folder_index' => ''),
      'default_widget' => 'insitu_field_folder_folder_select',
      'default_formatter' => 'insitu_field_folder_default',
    )
  );
}

/**
 * Implements hook_field_widget_info().
 */
function insitu_field_folder_field_widget_info() {  
  return array(   
    'insitu_field_folder_folder_select' => array(  
      'label' => t('Folder list'),  
      // Our widget will work with a field in DB under the name textf.
      'field types' => array('insitu_field_folder'),  
    ), 
  ); 
} 

/**
 * Implements hook_field_formatter_info().
 */
function insitu_field_folder_field_formatter_info() { 
  return array(
    'insitu_field_folder_default' => array(
      'label' => t('Default'),
      'field types' => array('insitu_field_folder',),
    ),
    'insitu_field_folder_link' => array(
      'label' => t('Link'),
      'field types' => array('insitu_field_folder',),
    ),
    'insitu_field_folder_plain_text_full_uri' => array(
      'label' => t('Full URI (Plain Text)'),
      'field types' => array('insitu_field_folder',),
    ),
    'insitu_field_folder_plain_text_folder' => array(
      'label' => t('Folder path (Plain Text)'),
      'field types' => array('insitu_field_folder',),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function insitu_field_folder_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $base_path, $base_url;
  $element = array();
  $index = $instance['settings']['field_folder_index'];
  $index = $index ? "/{$index}" : NULL;
  
  switch ($display['type']) {
    case 'insitu_field_folder_default':
      foreach ($items as $delta => $item) {
        // If no match was found in allowed values, fall back to the key.
        $output = field_filter_xss($item['value']);
        $element[$delta] = array('#markup' => $output);
      }
      break;

    case 'insitu_field_folder_link':
      foreach ($items as $delta => $item) {
        $value = field_filter_xss($item['value']);
        $public_folder_uri = file_stream_wrapper_get_instance_by_uri($value)->getExternalUrl() . $index;
        $link = l($public_folder_uri, $public_folder_uri);
        $element[$delta] = array('#markup' => $link);
      }
      break;
    
    case 'insitu_field_folder_plain_text_full_uri':
      foreach ($items as $delta => $item) {
        $value = field_filter_xss($item['value']);
        $public_folder_uri = file_stream_wrapper_get_instance_by_uri($value)->getExternalUrl() . $index;
        $element[$delta] = array('#markup' => $public_folder_uri);
      }
      break;
    
    case 'insitu_field_folder_plain_text_folder':
      foreach ($items as $delta => $item) {
        $value = field_filter_xss($item['value']);
        $element[$delta] = array('#markup' => $value);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function insitu_field_folder_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_settings_form().
 */
function insitu_field_folder_field_instance_settings_form($field, $instance) {
  global $base_url, $base_path;
  
  switch ($field['type']) {
    case 'insitu_field_folder':
      $public_folder = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath();
      $root_path = isset($instance['settings']['field_folder_root']) ? $instance['settings']['field_folder_root'] : 'html_package';
      $form['field_folder_root'] = array(
        '#type' => 'textfield',
        '#title' => t('Root folder to show'),
        '#default_value' => $root_path,
        '#description' => t("This path will be relative to the public file directory<br />
        Current value: {$root_path}<br />
        Full path: {$base_url}{$base_path}{$public_folder}/{$root_path}/<br />
        "),
      );
      $form['field_folder_index'] = array(
        '#type' => 'textfield',
        '#title' => t('Name of the index file'),
        '#default_value' => isset($instance['settings']['field_folder_index']) ? $instance['settings']['field_folder_index'] : NULL,
        '#description' => t("<em>Ex. index.html</em>"),
      );
      break;
      
  }

  return $form;
}
/**
 * Implements hook_field_settings_form().
 */
function insitu_field_folder_field_settings_form($field, $instance, $has_data) {
  //$settings = $field['settings'];
  
}

/**
 * Implements hook_field_widget_form().
 */
function insitu_field_folder_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  global $base_path;
  
  // Setting switch into parameters that wll work widget types that are in module.
  switch ($instance['widget']['type']) { 
      // If the selected widget is 'folder_list'.
      case 'insitu_field_folder_folder_select': 
        // Then we build a select list using the form API and populated with the list of folders.
        
        $root_folder = isset($instance['settings']['field_folder_root']) ? $instance['settings']['field_folder_root'] : 'html_package';
        $root_folder = trim($root_folder) ? $root_folder : 'html_package';
        $public_folder = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath() . "/" . $root_folder . "/";
        
        if($root_folder) {
          $dir = "public://{$root_folder}";
        }
        
        $mask = '/.*/';
        $dir_options = array(
          'recurse' => FALSE,
        );

        $packages = file_scan_directory($dir, $mask, $dir_options);
        $options = array();
        if(count($packages)) {
          foreach($packages as $uri => $package) {
            $options[$uri] = $package->name;
          }
          asort($options);
        }
        
        $element['value'] = array( 
            // Element type 'textfield'.
            '#type' => 'select', 
            // Heading given in element settings.
            '#title' => $element['#title'], 
            // Widget description is given in element settings.
            '#description' => t("To see a package in this list, you must upload its folder to the server at the location: <strong>%path</strong><br />", array('%path' => $public_folder)) . $element['#description'],
            '#default_value' => (isset($items['0']['value']) ? $items['0']['value'] : NULL), 
            // If element is required it will be indicated in settings of the very element.
            '#required' => $element['#required'], 
            // Element location â€“ 
            // If it's indicated, value should be used, if not, value is 0.
            '#weight' => isset($element['#weight']) ? $element['#weight'] : 0,
            // Line that we'll need for the output.
            '#delta' => $delta,
            // We assign the options here
            '#options' => array('' => t('None')) + $options,
        );
      break;
  }
  return $element;
}
