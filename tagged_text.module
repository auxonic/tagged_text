<?php

/**
 * @file
 * Tagged Text Field Module
 */

/**
 * Implements hook_field_info().
 * 
 * This field provides a select list for choosing a folder path to be saved as field value.
 */
function tagged_text_field_info() {
  $fields = array();

  $fields['tagged_text'] = array(
    'label' => t('Tagged textfield'),
    'description' => t('Creates a taxonomy tagged textfield for use in entities'),
    //'settings' => array(),
    'instance_settings' => array(
      'tag_vocabulary' => '',
      'text_format' => ''
    ),
    'default_widget' => 'tagged_text_select_text',
    'default_formatter' => 'tagged_text_tag_text',
  );
  
  return $fields;
}

/**
 * Implements hook_field_widget_info().
 */
function tagged_text_field_widget_info() {
  $widgets = array();

  $widgets['tagged_text_select_text'] = array(
    'label' => t('Tagged textfield'),
    'field types' => array('tagged_text'),
    'settings' => array(
      'rows' => 3,
    ),
  );

  return $widgets;

} 

/**
 * Implements hook_field_formatter_info().
 *
 * https://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_widget_info/7
 */
function tagged_text_field_formatter_info() {
  return array(
    'tagged_text_tag_only' => array(
      'label' => t('Tag only'),
      'description' => t('Displays only the renderd taxonomy'),
      //'settings' => array('taxonomy_mode' => 'text'),
      'field types' => array('tagged_text',),
    ),
    'tagged_text_tag_text' => array(
      'label' => t('Tag & text'),
      'description' => t('Displays both the rendered taxonomy and the textfield'),
      'field types' => array('tagged_text',),
    ),
    'tagged_text_text_only' => array(
      'label' => t('Text only'),
      'description' => t('Displays only the renderd textfield'),
      'field types' => array('tagged_text',),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function tagged_text_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $base_path, $base_url;
  $settings = $display['settings'];
  $element = array();
  $index = $settings['field_folder_index'];
  $index = $index ? "/{$index}" : NULL;
  
  switch ($display['type']) {
    case 'tagged_text_tag_only':
      foreach ($items as $delta => $item) {
        // If no match was found in allowed values, fall back to the key.
        $output = field_filter_xss($item['value']);
        $element[$delta] = array('#markup' => $output);
      }
      break;

    case 'tagged_text_tag_text':
      foreach ($items as $delta => $item) {
        $output = field_filter_xss($item['value']);
        $element[$delta] = array('#markup' => $output);
      }
      break;
    
    case 'tagged_text_text_only':
      foreach ($items as $delta => $item) {
        $output = field_filter_xss($item['value']);
        $element[$delta] = array('#markup' => $output);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function tagged_text_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_settings_form().
 */
function tagged_text_field_instance_settings_form($field, $instance) {
  global $base_url, $base_path;
  /*      'tag_vocabulary' => '',
      'text_format' => ''*/
  switch ($field['type']) {
    case 'tagged_text':
      $vocabularies = taxonomy_get_vocabularies();
      $vocab_array = array();
      foreach ($vocabularies as &$item) {
        $vocab_array[$item->vid] = $item->name;
      }
      $form['tag_vocabulary'] = array(
        '#type' => 'select',
        '#title' => t('Tag Vocabulary'),
        '#options' => $vocab_array,
        //'#default_value' => $root_path,
        '#description' => t("This taxonomy will be used to tag the textfield entries."),
      );
      $formats = filter_formats();
      $format_array = array();
      foreach ($formats as &$item) {
        $format_array[$item->format] = $item->name;
      }
      $form['text_format'] = array(
        '#type' => 'select',
        '#title' => t('Textfield format'),
        '#options' => $format_array,
        '#description' => t("Default text format for the text field"),
      );
      break;
      
  }

  return $form;
}
/**
 * Implements hook_field_settings_form().
 */
function tagged_text_field_settings_form($field, $instance, $has_data) {
  //$settings = $field['settings'];
}

/**
 * Implements hook_field_widget_form().
 */
function tagged_text_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  //global $base_path;
  $settings = $instance['settings'];
  
  // Setting switch into parameters that wll work widget types that are in module.
  switch ($instance['widget']['type']) { 
      // If the selected widget is 'folder_list'.
      case 'tagged_text_select_text':
        // Build the Taxonomy select box
        $terms = taxonomy_get_tree($settings['tag_vocabulary']);
        $terms_select = array();
        foreach ($terms as $term) {
          $terms_select[$term->tid] = $term->name;
        }

        $element['tid'] = array(
            '#type' => 'select', 
            // Heading given in element settings.
            '#title' => $element['#title'], 
            // Widget description is given in element settings.
            '#description' => $element['#description'],
            '#default_value' => (isset($items['0']['value']) ? $items['0']['value'] : NULL), 
            // If element is required it will be indicated in settings of the very element.
            '#required' => $element['#required'], 
            // Element location â€“ 
            // If it's indicated, value should be used, if not, value is 0.
            '#weight' => isset($element['#weight']) ? $element['#weight'] : 0,
            // Line that we'll need for the output.
            '#delta' => $delta,
            // We assign the options here
            '#options' => $terms_select,
        );
        $element['value'] = array(
          '#type' => 'text_format',
          '#title' => t('Value'),
          '#format' => $settings['text_format'],
          //'#weight' => 0,
        );
      break;
  }
  return $element;
}
