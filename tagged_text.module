<?php

/**
 * @file
 * Tagged Text Field Module
 */


/**
 * Implements hook_field_info().
 * 
 * This field provides a select list for choosing a folder path to be saved as field value.
 */
function tagged_text_field_info() {
  $fields = array();

  $fields['tagged_text'] = array(
    'label' => t('Tagged textfield'),
    'description' => t('Creates a taxonomy tagged textfield for use in entities'),
    //'settings' => array(),
    'instance_settings' => array(
      'tag_vocabulary' => '',
      'title_taxonomy' => '',
      'title_textfield' => '',
    ),
    'default_widget' => 'tagged_text_select_text',
    'default_formatter' => 'tagged_text_tag_text',
  );
  
  return $fields;
}

/**
 * Implements hook_field_widget_info().
 */
function tagged_text_field_widget_info() {
  $widgets = array();

  $widgets['tagged_text_select_text'] = array(
    'label' => t('Tagged textfield'),
    'field types' => array('tagged_text'),
    'settings' => array(
      'rows' => 3,
    ),
  );

  return $widgets;

} 

/**
 * Implements hook_field_formatter_info().
 *
 * https://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_widget_info/7
 */
function tagged_text_field_formatter_info() {
  return array(
    'tagged_text_tag_only' => array(
      'label' => t('Tag only'),
      'description' => t('Displays only the renderd taxonomy'),
      //'settings' => array('taxonomy_mode' => 'text'),
      'field types' => array('tagged_text',),
    ),
    'tagged_text_tag_text' => array(
      'label' => t('Tag & text'),
      'description' => t('Displays both the rendered taxonomy and the textfield'),
      'field types' => array('tagged_text',),
    ),
    'tagged_text_text_only' => array(
      'label' => t('Text only'),
      'description' => t('Displays only the renderd textfield'),
      'field types' => array('tagged_text',),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function tagged_text_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $base_path, $base_url;
  $settings = $display['settings'];
  $element = array();
  
  foreach ($items as $delta => $item) {
    $tag = '';
    $text = '';

    if (in_array($display['type'], array('tagged_text_tag_only', 'tagged_text_tag_text'))) {
        $term = taxonomy_term_load($item['tid']);
        $tag = $term->name;
        $tag = '<div class="tagged-text-term">'.check_plain($tag).'</div>';
    }
    if (in_array($display['type'], array('tagged_text_tag_text', 'tagged_text_text_only'))) {
        $text =  check_markup($item['value'], $item['format'], $langcode);
        $text = '<div class="tagged-text-text">'.$text.'</div>';
    }
    $element[$delta] = array(
      '#markup' => '<div class="'.drupal_html_class($display['type']).'">'.$tag.$text.'</div>',
    );
  }

  return $element;
}


/**
 * Implements hook_field_is_empty().
 */
function tagged_text_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_settings_form().
 */
function tagged_text_field_instance_settings_form($field, $instance) {
  switch ($field['type']) {
    case 'tagged_text':
      $vocabularies = taxonomy_get_vocabularies();
      $vocab_array = array();
      foreach ($vocabularies as &$item) {
        $vocab_array[$item->vid] = $item->name;
      }
      $form['tag_vocabulary'] = array(
        '#type' => 'select',
        '#title' => t('Tag Vocabulary'),
        '#options' => $vocab_array,
        '#default_value' => $instance['settings']['tag_vocabulary'],
        '#description' => t("This taxonomy will be used to tag the textfield entries."),
      );
      $form['title_taxonomy'] = array(
        '#type' => 'textfield',
        '#title' => t('Taxonomy Title'),
        '#default_value' => empty($instance['settings']['title_taxonomy']) ? t('Tag') : $instance['settings']['title_taxonomy'],
        '#description' => t("This text will be the header for the Taxonomy. You may leave this blank."),
      );
      $form['title_textfield'] = array(
        '#type' => 'textfield',
        '#title' => t('Textfield Title'),
        '#default_value' => empty($instance['settings']['title_textfield']) ? t('Details') : $instance['settings']['title_textfield'],
        '#description' => t("This text will be the header of the textfield.  You may leave this blank."),
      );
      break;
      
  }

  return $form;
}
/**
 * Implements hook_field_settings_form().
 */
function tagged_text_field_settings_form($field, $instance, $has_data) {
  //$settings = $field['settings'];
}

/**
 * Implements hook_field_widget_form().
 */
function tagged_text_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  //global $base_path;
  
  // Setting switch into parameters that wll work widget types that are in module.
  switch ($instance['widget']['type']) { 
      // If the selected widget is 'folder_list'.
      case 'tagged_text_select_text':
        // Build the Taxonomy select box
        //kpr($instance);
        $terms = taxonomy_get_tree($instance['settings']['tag_vocabulary']);
        $terms_select = array();
        foreach ($terms as $term) {
          $terms_select[$term->tid] = $term->name;
        }
        //kpr($terms);
        //kpr($items);
        
        $element['tid'] = array(
            '#type' => 'select', 
            // Heading given in element settings.
            //'#title' => $element['#title'],
            // Widget description is given in element settings.
            //'#description' => $element['#description'],
            '#default_value' => (isset($items[$delta]['tid']) ? $items[$delta]['tid'] : NULL),
            // If element is required it will be indicated in settings of the very element.
            '#required' => $element['#required'], 
            // Element location â€“ 
            // If it's indicated, value should be used, if not, value is 0.
            '#weight' => -1,
            // Line that we'll need for the output.
            //'#delta' => $delta,
            // We assign the options here
            '#options' => $terms_select,
            '#prefix' => '<div class="tagged-text-admin">', //style="float: left; margin-right: 10px;"
            '#suffix' => '</div>',
        );
        $element += array(
          '#type' => 'text_format', //'text_format' or 'textarea' or 'textfield'
          //'#title' => t('Value'),
          '#description' => $element['#description'],
          '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
          '#rows' => $instance['widget']['settings']['rows'],
          '#format' => isset($items[$delta]['format']) ? $items[$delta]['format'] : NULL,
          '#weight' => isset($element['#weight']) ? $element['#weight'] : 0,
          '#delta' => $delta,
        );
        //kpr($instance);
        if (!empty($instance['settings']['title_taxonomy'])) {
          $element['tid']['#title'] = $instance['settings']['title_taxonomy'];
        }
        if (!empty($instance['settings']['title_textfield'])) {
          $element['#title'] = $instance['settings']['title_textfield'];
        }
        $element['#prefix'] = "<div>"; //<div style=\"font-weight: bold;\" class=\"field-title\">{$instance['settings']['field_title']}</div>";
        $element['#suffix'] = "</div>";
      break;
  }
  return $element;
}

/**
 * Implements hook_field_presave().
 */
function tagged_text_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'tagged_text') {
    //dsm($entity); // node object being saved
    //dsm($field); // field config values, includes columns, module and type
    //dsm($instance); // field instance config (for this node type), bundle and default value
    //dsm($items); // $delta keyed list of entries for this save

  }
}

